// Code generated by MockGen. DO NOT EDIT.
// Source: ./genconfig.go
//
// Generated by this command:
//
//	mockgen -destination ./mock_genconfig.go -source ./genconfig.go -package main verifier, certGrabber
//

// Package main is a generated GoMock package.
package main

import (
	x509 "crypto/x509"
	reflect "reflect"

	fronted "github.com/getlantern/fronted"
	keyman "github.com/getlantern/keyman"
	gomock "go.uber.org/mock/gomock"
)

// Mockverifier is a mock of verifier interface.
type Mockverifier struct {
	ctrl     *gomock.Controller
	recorder *MockverifierMockRecorder
}

// MockverifierMockRecorder is the mock recorder for Mockverifier.
type MockverifierMockRecorder struct {
	mock *Mockverifier
}

// NewMockverifier creates a new mock instance.
func NewMockverifier(ctrl *gomock.Controller) *Mockverifier {
	mock := &Mockverifier{ctrl: ctrl}
	mock.recorder = &MockverifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockverifier) EXPECT() *MockverifierMockRecorder {
	return m.recorder
}

// Vet mocks base method.
func (m_2 *Mockverifier) Vet(m *fronted.Masquerade, pool *x509.CertPool, testURL string) bool {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Vet", m, pool, testURL)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Vet indicates an expected call of Vet.
func (mr *MockverifierMockRecorder) Vet(m, pool, testURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vet", reflect.TypeOf((*Mockverifier)(nil).Vet), m, pool, testURL)
}

// MockcertGrabber is a mock of certGrabber interface.
type MockcertGrabber struct {
	ctrl     *gomock.Controller
	recorder *MockcertGrabberMockRecorder
}

// MockcertGrabberMockRecorder is the mock recorder for MockcertGrabber.
type MockcertGrabberMockRecorder struct {
	mock *MockcertGrabber
}

// NewMockcertGrabber creates a new mock instance.
func NewMockcertGrabber(ctrl *gomock.Controller) *MockcertGrabber {
	mock := &MockcertGrabber{ctrl: ctrl}
	mock.recorder = &MockcertGrabberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcertGrabber) EXPECT() *MockcertGrabberMockRecorder {
	return m.recorder
}

// GetCertificate mocks base method.
func (m *MockcertGrabber) GetCertificate(ip, domain string) (*keyman.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", ip, domain)
	ret0, _ := ret[0].(*keyman.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockcertGrabberMockRecorder) GetCertificate(ip, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockcertGrabber)(nil).GetCertificate), ip, domain)
}
