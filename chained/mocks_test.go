// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/getlantern/flashlight/v7/chained (interfaces: WASMDownloader,TorrentClient,TorrentInfo)
//
// Generated by this command:
//
//	mockgen -package=chained -destination=mocks_test.go . WASMDownloader,TorrentClient,TorrentInfo
//

// Package chained is a generated GoMock package.
package chained

import (
	context "context"
	io "io"
	reflect "reflect"

	events "github.com/anacrolix/chansync/events"
	torrent "github.com/anacrolix/torrent"
	gomock "go.uber.org/mock/gomock"
)

// MockWASMDownloader is a mock of WASMDownloader interface.
type MockWASMDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockWASMDownloaderMockRecorder
}

// MockWASMDownloaderMockRecorder is the mock recorder for MockWASMDownloader.
type MockWASMDownloaderMockRecorder struct {
	mock *MockWASMDownloader
}

// NewMockWASMDownloader creates a new mock instance.
func NewMockWASMDownloader(ctrl *gomock.Controller) *MockWASMDownloader {
	mock := &MockWASMDownloader{ctrl: ctrl}
	mock.recorder = &MockWASMDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWASMDownloader) EXPECT() *MockWASMDownloaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWASMDownloader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWASMDownloaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWASMDownloader)(nil).Close))
}

// DownloadWASM mocks base method.
func (m *MockWASMDownloader) DownloadWASM(arg0 context.Context, arg1 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadWASM", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadWASM indicates an expected call of DownloadWASM.
func (mr *MockWASMDownloaderMockRecorder) DownloadWASM(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadWASM", reflect.TypeOf((*MockWASMDownloader)(nil).DownloadWASM), arg0, arg1)
}

// MockTorrentClient is a mock of TorrentClient interface.
type MockTorrentClient struct {
	ctrl     *gomock.Controller
	recorder *MockTorrentClientMockRecorder
}

// MockTorrentClientMockRecorder is the mock recorder for MockTorrentClient.
type MockTorrentClientMockRecorder struct {
	mock *MockTorrentClient
}

// NewMockTorrentClient creates a new mock instance.
func NewMockTorrentClient(ctrl *gomock.Controller) *MockTorrentClient {
	mock := &MockTorrentClient{ctrl: ctrl}
	mock.recorder = &MockTorrentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTorrentClient) EXPECT() *MockTorrentClientMockRecorder {
	return m.recorder
}

// AddMagnet mocks base method.
func (m *MockTorrentClient) AddMagnet(arg0 string) (TorrentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMagnet", arg0)
	ret0, _ := ret[0].(TorrentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMagnet indicates an expected call of AddMagnet.
func (mr *MockTorrentClientMockRecorder) AddMagnet(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMagnet", reflect.TypeOf((*MockTorrentClient)(nil).AddMagnet), arg0)
}

// Close mocks base method.
func (m *MockTorrentClient) Close() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTorrentClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTorrentClient)(nil).Close))
}

// MockTorrentInfo is a mock of TorrentInfo interface.
type MockTorrentInfo struct {
	ctrl     *gomock.Controller
	recorder *MockTorrentInfoMockRecorder
}

// MockTorrentInfoMockRecorder is the mock recorder for MockTorrentInfo.
type MockTorrentInfoMockRecorder struct {
	mock *MockTorrentInfo
}

// NewMockTorrentInfo creates a new mock instance.
func NewMockTorrentInfo(ctrl *gomock.Controller) *MockTorrentInfo {
	mock := &MockTorrentInfo{ctrl: ctrl}
	mock.recorder = &MockTorrentInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTorrentInfo) EXPECT() *MockTorrentInfoMockRecorder {
	return m.recorder
}

// GotInfo mocks base method.
func (m *MockTorrentInfo) GotInfo() events.Done {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GotInfo")
	ret0, _ := ret[0].(events.Done)
	return ret0
}

// GotInfo indicates an expected call of GotInfo.
func (mr *MockTorrentInfoMockRecorder) GotInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GotInfo", reflect.TypeOf((*MockTorrentInfo)(nil).GotInfo))
}

// NewReader mocks base method.
func (m *MockTorrentInfo) NewReader() torrent.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader")
	ret0, _ := ret[0].(torrent.Reader)
	return ret0
}

// NewReader indicates an expected call of NewReader.
func (mr *MockTorrentInfoMockRecorder) NewReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockTorrentInfo)(nil).NewReader))
}
