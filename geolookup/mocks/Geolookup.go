// Code generated by mockery v0.0.0-dev. DO NOT EDIT.
//
// XXX Generated with `mockery --name=Geolookup` and then modified a bit (see
// paragraph below)
// Download 'mockery' from <https://github.com/vektra/mockery>
//
// XXX Updates from default mockery run:
// Rewrote '<- chan bool' to 'chan bool' in 'OnRefresh()' since it's not
// possible to cast a receive-only channel to an interface

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Geolookup is an autogenerated mock type for the Geolookup type
type Geolookup struct {
	mock.Mock
}

// GetCountry provides a mock function with given fields: timeout
func (_m *Geolookup) GetCountry(timeout time.Duration) string {
	ret := _m.Called(timeout)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Duration) string); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetIP provides a mock function with given fields: timeout
func (_m *Geolookup) GetIP(timeout time.Duration) string {
	ret := _m.Called(timeout)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Duration) string); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OnRefresh provides a mock function with given fields:
func (_m *Geolookup) OnRefresh() <-chan bool {
	ret := _m.Called()

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// Refresh provides a mock function with given fields:
func (_m *Geolookup) Refresh() {
	_m.Called()
}
